import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import streamlit.components.v1 as components

# Load the data
@st.cache_data
def load_data():
    data = pd.read_csv("assign2_wastedata.csv")
    data["Date"] = pd.to_datetime(data["Date"])
    return data

data = load_data()

# Sidebar filters
st.sidebar.title("Filters")
selected_building = st.sidebar.multiselect("Select Building", data["Building"].unique())
selected_stream = st.sidebar.multiselect("Select Stream", data["Stream"].unique())
selected_substream = st.sidebar.multiselect("Select Substream", data["Substream"].unique())

# Date filter
min_date = data["Date"].min()
max_date = data["Date"].max()
selected_date_range = st.sidebar.date_input("Select Date Range", [min_date, max_date], format="YYYY-MM-DD")
start_date = datetime.combine(selected_date_range[0], datetime.min.time())
end_date = datetime.combine(selected_date_range[1], datetime.max.time())

# Filter the data based on sidebar selections and date range
filtered_data = data
if selected_building:
    filtered_data = filtered_data[filtered_data["Building"].isin(selected_building)]
if selected_stream:
    filtered_data = filtered_data[filtered_data["Stream"].isin(selected_stream)]
if selected_substream:
    filtered_data = filtered_data[filtered_data["Substream"].isin(selected_substream)]
filtered_data = filtered_data[(filtered_data["Date"] >= start_date) & (filtered_data["Date"] <= end_date)]

# Main content
st.title("Waste Data Visualization")

# Visualization 1: Total Volume by Building
fig_volume = px.bar(filtered_data, x="Building", y="Volume", color="Building", title="Total Volume by Building")
st.plotly_chart(fig_volume)

# Visualization 2: Pie chart of Waste Generated by Stream
stream_totals = filtered_data.groupby("Stream")["Volume"].sum().reset_index()
fig_pie = px.pie(stream_totals, names="Stream", values="Volume", title="Waste Generated by Stream")
st.plotly_chart(fig_pie)

# Visualization 3: Total Weight by Substream
fig_weight = px.bar(filtered_data, x="Substream", y="Weight", color="Substream", title="Total Weight by Substream")
st.plotly_chart(fig_weight)

# Visualization 4: Scatter plot of Volume vs Weight with Trend Line
fig_scatter = px.scatter(filtered_data, x="Volume", y="Weight", color="Building", trendline="ols", title="Volume vs Weight")
st.plotly_chart(fig_scatter)

# Visualization 5: Line chart of Waste Generation by Time by Building
fig_trend = px.line(filtered_data, x="Date", y="Volume", color="Building", title="Trend of Waste Generation by Time by Building")
st.plotly_chart(fig_trend)




